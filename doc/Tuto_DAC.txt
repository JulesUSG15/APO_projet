Comment définir un automate en DAC (Définition d'Automate Cellulaire) ?
Le DAC permet de définir les règles appliquées sur chaque cellules d'un tableau de dimension n.
Voici un exemple de code écrit en DAC :

0, -1;
0, 1;
-1, 0;
1, 0;
@

#1>0 & $0=1/
    0.5:$2, 0.9:2;
!($4<1 | $3=0) & #0=2/
    2:#1;


Il est important de savoir que la mise en forme n'est pas importante en DAC.
On peut tout écrire sur une ligne mais la mise en forme facilite la compréhension du fichier.

Définition des voisins :

    Tout d'abord, un fichier DAC commence toujours par la définition des voisins.
    Pour définir un voisin, on écrit ses coordonnées relatives à la cellule sur laquelle la règle est appliquée.

    Les coordonnées sont des entiers et sont séparés par ','.
    Tous les voisins doivent avoir le même nombre de coordonnées.
    Ce nombre de coordonnées définit la dimension des tableaux sur lesquels peuvent s'appliquer ces règles.
    Il est donc indispensable de définir au moins 1 voisin même si on ne l'utilise pas.

    La définition d'un voisin se finit par ';'.

    La fin de la définition des voisins est marquée par '@'.

    Exemple ci-dessus :
        - 4 voisins définis
        - s'applique sur des tableaux de dimensions 2
        - les voisins sont : la cellule du dessus, du dessous, de gauche et de droite

Les Types de valeurs :

    La partie suivante du code DAC utilise 2 types spéciaux de valeurs.

    Le type voisin :

        Le type voisin est défini par '$' et permet de récupérer la valeur contenue dans la cellule d'un voisin.
        $i renvoi la valeur contenue dans la cellule du i eme voisin défini.
        La valeur suivie par '$' est un entier naturel allant de 0 jusqu'au nombre de voisins définis.
        $0 est spécial. Il permet de récupérer la valeur contenue dans la cellule sur laquelle la règle est appliquée.

        Exemple ci-dessus :
            - $0 renvoi la valeur contenue dans la cellule sur laquelle la règle est appliquée
            - $1 renvoi la valeur contenue dans la cellule de coordonnées 0, -1 relativement à la cellule sur laquelle la règle est appliquée
            - $3 renvoi la valeur contenue dans la cellule de coordonnées -1, 0 relativement à la cellule sur laquelle la règle est appliquée
            - $4 renvoi la valeur contenue dans la cellule de coordonnées 1, 0 relativement à la cellule sur laquelle la règle est appliquée
    
    Le type état :

        Le type état est défini par '#' et renvoie le nombre de voisins qui possèdent une certaine valeur.
        #i renvoi le nombre de voisins dont leur valeur est égale à i.
        La valeur suivi par '#' est un entier.

        Exemple ci-dessus :
            - #1 renvoi le nombre de voisins dont leur valeur vaut 1
            - #0 renvoi le nombre de voisins dont leur valeur vaut 0

Définition des règles :

    Après avoir défini les voisins, on peut désormais définir les règles.
    Ces règles sont une succession de conditions et d'actions.
    Lorsqu'une condition est validée, les suivantes ne sont pas testées.

    Les conditions :

        La définition d'une condition se finit toujours par '/' et est toujours suivie d'au moins une action.
        La condition est testée de gauche à droite et prend en compte le parenthésage.
        Une condition peut être composée de plusieurs opérateurs conditionnels :

            - Et défini par '&'. Prends une condition à sa gauche et à sa droite.
            - Ou défini par '|'. Prends une condition à sa gauche et à sa droite.
            - Non défini par '!'. Prends une condition à sa droite.
            - Egal défini par '='. Prend une valeur à sa gauche et à sa droite.
            - Inférieur défini par '<'. Prend une valeur à sa gauche et à sa droite.
            - Supérieur défini par '>'. Prend une valeur à sa gauche et à sa droite.
        
        Exemple ci-dessus :
            - #1>0 & $0=1 est valide si au moins un voisin vaut 1 et si la cellule sur laquelle la règle est appliquée vaut 0
            - !($4<1 | $3=0) & #0=2 est valide si la cellule sur laquelle la règle est appliquée vaut 2 et que l'on n'a pas
                                    le quatrième voisin qui vaut une valeur inférieur à 1 ou le troisième voisin qui vaut 0
    
    Les actions :

        Une action est toujours précédée d'une condition.
        Si la condition du dessus est valide alors on exécute l'action.

        Une action se finit toujours par ';'.

        Une action peut être composée de plusieurs instructions séparées par ','.

        Les instructions :

            Une instruction commence par un coefficient qui représente le poids de l'instruction au sein de l'action.
            Ce coefficient est un réel strictement positif.

            Le coefficient est suivi par ':' puis d'une valeur qui peut être un entier ou un type spécial.

            Lors de l'exécution d'une instruction, on assigne à la cellule sur laquelle la règle est appliquée la valeur définie.
        
        Lors de l'exécution d'une action, on exécute une seule instruction prise au hasard en fonction de son coefficient.
        Plus son coefficient est élevé, plus l'instruction a de chances d'être exécutée.

        Exemple ci-dessus :
            - Si #1>0 & $0=1 est valide :
                - La première instruction a une probabilité de 0.5/(0.5+0.9) = 36% de chances d'être exécutée.
                    On assignerait alors la valeur du deuxième voisin à la cellule sur laquelle la règle est appliquée.
                - La deuxième instruction a une probabilité de 0.9/(0.5+0.9) = 64% de chances d'être exécutée.
                    On assignerait alors la valeur 2 à la cellule sur laquelle la règle est appliquée.
            - Si !($4<1 | $3=0) & #0=2 est valide :
                - L'instruction a une probabilité de 2/2 = 100% de chances d'être exécutée.
                    On assignerait alors le nombre de voisins valant 1 à la cellule sur laquelle la règle est appliquée.


Vous avez désormais toutes les clés pour définir vos propres automates cellulaires.


